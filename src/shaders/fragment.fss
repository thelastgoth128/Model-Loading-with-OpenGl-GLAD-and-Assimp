#version 330 core
out vec4 FragColor;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

uniform sampler2D texture_diffuse1;
 uniform sampler2D texture_diffuse2;
 uniform sampler2D texture_diffuse3;
 uniform sampler2D texture_specular1;
 uniform sampler2D texture_specular2;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float shininess;
};

in vec2 TexCoords;

uniform Material material;

struct Light {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    float constant;
    float linear;
    float quadratic;
};
uniform Light light;

struct DirLight {
    vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
uniform DirLight dirLight;

struct PointLight{
 vec3 position;

 float constant;
 float linear;
 float quadratic;
 
 vec3 ambient;
 vec3 diffuse;
 vec3 specular;
 };

 #define NR_POINT_LIGHTS 4
 uniform PointLight pointLights[NR_POINT_LIGHTS];

in vec3 Normal;
in vec3 FragPos;

//directional light function
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);

//point light function
vec3 CalcPointLight(PointLight light,vec3 normal,vec3 fragPos, vec3 viewDir);

//spot light
vec3 CalcSpotLight(Light light,vec3 normal, vec3 FragPos,vec3  viewDir);

void main() 
{
    //properties
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);

    //phase 1: Directional lighting 
    vec3 result = CalcDirLight(dirLight, norm, viewDir);

    //phase2: Point lightPos
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
        result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);
    
    //phase 3: Spot light
    result += CalcSpotLight(light, norm, FragPos, viewDir);

    FragColor = vec4(result, 1.0);
}


vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
 {
 vec3 lightDir = normalize(-light.direction);
 // diffuse shading
 float diff = max(dot(normal, lightDir), 0.0);
 // specular shading
 vec3 reflectDir = reflect(-lightDir, normal);
 float spec = pow(max(dot(viewDir, reflectDir), 0.0),
 material.shininess);
 // combine results
 vec3 ambient = light.ambient * vec3(texture(material.diffuse,
 TexCoords));
 vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,
 TexCoords));
 vec3 specular = light.specular * spec * vec3(texture(material.specular,
 TexCoords));
 return (ambient + diffuse + specular);
 }

 vec3 CalcPointLight (PointLight light,vec3 normal,vec3 fragPos,vec3 viewDir)
 {
 
 vec3 lightDir = normalize(light.position - fragPos);
 
    //diffuseshading
 float diff=max(dot(normal, lightDir),0.0);
 
    //specularshading
 vec3 reflectDir=reflect(-lightDir,normal);
 float spec=pow(max(dot(viewDir,reflectDir),0.0),material.shininess);
 
    //attenuation
 float distance =length(light.position-fragPos);
 float attenuation=1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
 
 //combineresults
 vec3 ambient = light.ambient * vec3(texture(material.diffuse,TexCoords));
 
 vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,TexCoords));
 
 vec3 specular = light.specular * spec * vec3(texture(material.specular,TexCoords));
 
 ambient *=attenuation;
 diffuse *=attenuation;
 specular *=attenuation;
 
 return(ambient+diffuse+specular);
 }

 vec3 CalcSpotLight(Light light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    float theta = dot(lightDir, normalize(-light.direction));

    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

    // Attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    // Ambient
    vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));

    // Diffuse
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));

    // Specular
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));

    // Apply intensity and attenuation
    ambient *= attenuation;
    diffuse *= intensity * attenuation;
    specular *= intensity * attenuation;

    return ambient + diffuse + specular;
}
